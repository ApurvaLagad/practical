#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
import seaborn as sns


# In[2]:


df=pd.read_csv('Churn_Modelling.csv')


# In[4]:


df.head()


# In[43]:


df.shape


# In[5]:


df.describe()


# In[6]:


df.isna().sum()


# In[7]:


df.Geography.unique()


# In[8]:


from sklearn.preprocessing import LabelEncoder


# In[9]:


le=LabelEncoder()
df.Gender=le.fit_transform(df.Gender)


# In[10]:


df.Gender


# In[13]:


corr=df.corr()
corr.style.background_gradient(cmap='BuGn')


# In[17]:


plt.figure(figsize=(24,14))
sns.heatmap(corr,annot=True,cmap='YlGnBu',linewidths=0.2,square=True)


# In[18]:


df.drop(['RowNumber','CustomerId','Surname'],axis=1,inplace=True)


# In[19]:


df.Exited.value_counts()


# In[20]:


cat_cols=['Geography','Gender']
num_cols=[col for col in df.columns if col not in cat_cols]
num_cols


# In[21]:


for col in cat_cols:
    print(f'{col} : {df[col].unique()}')


# In[22]:


cols_to_scale = ['CreditScore','Age','Tenure','Balance','NumOfProducts','EstimatedSalary']
from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
df[cols_to_scale]=scaler.fit_transform(df[cols_to_scale])


# In[38]:


x= df.drop('Exited',axis=1)
y=df.Exited


# In[39]:


from sklearn.model_selection import train_test_split

xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.25)


# In[26]:


from sklearn.metrics import classification_report


# In[37]:


le=LabelEncoder()
df.Geography=le.fit_transform(df.Geography)


# In[46]:


def ANN(xtrain,xtest,ytrain,ytest,loss,weight):
#     xtrain = np.asarray(xtrain).astype(np.float32)
#     ytrain = np.asarray(ytrain).astype(np.float32)
    model=keras.Sequential([
    keras.layers.Dense(20,input_shape=(10,),activation='relu'),
    keras.layers.Dense(1,activation='sigmoid')
    ])

    model.compile(optimizer='adam',
                 loss=loss,
                 metrics=['accuracy'])
    
    if weight==-1:
        model.fit(xtrain,ytrain,epochs=100)
    else:
        model.fit(xtrain,ytrain,epochs=100,class_weight=weight)
    print()
    print(model.evaluate(xtest,ytest))
    print()
    ypred= model.predict(xtest)
    ypred=np.round(ypred)
    print()
    print(classification_report(ytest,ypred))
        
    return ypred


# In[47]:


ypred=ANN(xtrain,xtest,ytrain,ytest,'binary_crossentropy',-1)


# In[50]:


cm=tf.math.confusion_matrix(labels=ytest,predictions=ypred)
plt.figure(figsize=(10,7))
sns.heatmap(cm,annot=True)
plt.xlabel('predicted')
plt.ylabel('Truth')


# In[53]:


from sklearn.metrics import accuracy_score


# In[54]:


accuracy_score(ytest,ypred)